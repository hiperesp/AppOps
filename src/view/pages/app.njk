{% extends 'layout.njk' %}

{% set tabs = {
    overview: "Overview",
    access_logs: "Access Logs",
    error_logs: "Error Logs",
    app_logs: "App Logs",
    settings: "Settings"
} %}
{% if tab not in tabs %}
    {% set tab = "overview" %}
{% endif %}

{% set title %}{{ app.name }} - {{ tabs[tab] }}{% endset %}

{% set breadcrumb = [
    {
        text: namespace.name,
        href: '/' + namespace.name
    },
    {
        text: app.name,
        active: true,
        ehref: '//' + (app.domains.app[0] or app.domains.global[0])
    }
] %}
{% set tabs %}
    <ul class="nav nav-tabs px-md-5 px-3">
        {% for key, value in tabs %}
            {% if tab === key %}
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="?tab={{ key }}">{{ value }}</a>
                </li>
            {% else %}
                <li class="nav-item">
                    <a class="nav-link" href="?tab={{ key }}">{{ value }}</a>
                </li>
            {% endif %}
        {% endfor %}
        <li class="nav-item">
            <a class="nav-link disabled">Disabled</a>
        </li>
    </ul>
{% endset %}

{% block content %}
    {% if tab == "access_logs" or tab == "error_logs" or tab == "app_logs" %}
        <style>
.ansi-30 { color: #000000; } .ansi-31 { color: #ff0000; } .ansi-32 { color: #00ff00; } .ansi-33 { color: #ffff00; } .ansi-34 { color: #0000ff; } .ansi-35 { color: #ff00ff; } .ansi-36 { color: #00ffff; } .ansi-37 { color: #ffffff; } .ansi-90 { color: #808080; } .ansi-91 { color: #ff0000; } .ansi-92 { color: #00ff00; } .ansi-93 { color: #ffff00; } .ansi-94 { color: #0000ff; } .ansi-95 { color: #ff00ff; } .ansi-96 { color: #00ffff; } .ansi-97 { color: #ffffff; } .ansi-40 { background-color: #000000; } .ansi-41 { background-color: #ff0000; } .ansi-42 { background-color: #00ff00; } .ansi-43 { background-color: #ffff00; } .ansi-44 { background-color: #0000ff; } .ansi-45 { background-color: #ff00ff; } .ansi-46 { background-color: #00ffff; } .ansi-47 { background-color: #ffffff; } .ansi-100 { background-color: #808080; } .ansi-101 { background-color: #ff0000; } .ansi-102 { background-color: #00ff00; } .ansi-103 { background-color: #ffff00; } .ansi-104 { background-color: #0000ff; } .ansi-105 { background-color: #ff00ff; } .ansi-106 { background-color: #00ffff; } .ansi-107 { background-color: #ffffff; }
        </style>
        <div class="w-100 p-3 flex-fill mb-0 bg-black text-white" style="overflow: scroll;">
            <div style="width:max-content" data-logs="{{ tab }}"></div>
        </div>
        <script>
            const body = document.body
            body.classList.add("d-flex", "flex-column")
            body.style.height = "100vh"

            const logOutput = document.querySelector('[data-logs="{{ tab }}"]');

            const eventSource = new EventSource('/{{ namespace.name }}/{{ app.name }}/api/server-sent-events/logs/{{ tab }}', {
                withCredentials: true
            });
            eventSource.addEventListener('message', function (e) {
                const newLines = JSON.parse(e.data);

                const group = document.createElement('div');
                group.classList.add('w-100', 'mt-3', 'p-2', 'rounded', 'bg-dark');
                group.style.position = 'relative';

                const badge = document.createElement('div');
                badge.classList.add('badge', 'bg-secondary', 'mb-2');
                badge.style.position = 'sticky';
                badge.style.left = '0';
                badge.innerText = new Date().toLocaleTimeString();
                group.appendChild(badge);

                const pre = document.createElement('pre');
                pre.classList.add('d-block', 'mb-0', 'text-white');
                pre.innerHTML = terminalOutputToHtml(newLines);
                group.appendChild(pre);

                logOutput.append(group);

                if(logOutput.scrollHeight > logOutput.clientHeight) {
                    logOutput.scrollTop = logOutput.scrollHeight - logOutput.clientHeight;
                }
            });

            function terminalOutputToHtml(outputStr) {
                function escapeHTML(str) {
                    var p = document.createElement("p");
                    p.appendChild(document.createTextNode(str));
                    return p.innerHTML;
                }
                function colorsHTML(str) {
                    let output = "";
                    let color = "";
                    let colorOpen = false;

                    for (let i = 0; i < str.length; i++) {
                        if (str[i] == "\u001b") {
                            if (str[i + 1] == "[") {
                                colorOpen = true;
                                color = "";
                                i += 2;
                            }
                        }
                        if (colorOpen) {
                            if (str[i] == "m") {
                                colorOpen = false;
                                if (color == "0") {
                                    output += "</span>";
                                } else {
                                    output += "</span><span class='ansi-" + color + "'>";
                                }
                            } else {
                                color += str[i];
                            }
                        } else {
                            output += str[i];
                        }
                    }

                    return output;
                }
                let output = escapeHTML(outputStr)
                output = colorsHTML(output)
                output = output.replace(/\n/g, '<br>')
                return output;

            }
        </script>
    {% else %}
        <main>
            <div class="container pt-3">
                <div class="mx-2">
                    <div class="mb-3 d-flex justify-content-end gap-1">
                        <button type="button" class="btn btn-light btn-sm"><i class="bi bi-pencil-fill"></i> Edit</button>
                        <button type="button" class="btn btn-dark btn-sm"><i class="bi bi-window-plus"></i> Scale</button>
                    </div>
                    {% if tab == "overview" %}
                        Overview
                    {% elseif tab == "settings" %}

                        <div class="row">
                            <div class="col-md-3">
                            </div>

                            <div class="col-md-6">
                                <form>
                                    <h4 class="mb-2">General</h4>
                                    <p class="mb-4 text-muted">General settings for your app.</p>

                                    <div class="form-group mb-3">
                                        <label for="name" class="fw-bold">App name</label>
                                        <input type="name" class="form-control" id="name" name="name" value="{{ app.name }}">
                                    </div>

                                    <div class="form-group mb-3">
                                        <label for="proxy-ports" class="fw-bold">Proxy Ports</label>
                                        <textarea class="form-control" id="proxy-ports" name="proxy-ports" rows="{{ app.proxyPorts.length + 1 }}">{% for proxyPorts in app.proxyPorts %}{{ proxyPorts + "\n" }}{% endfor %}</textarea>
                                    </div>

                                    <div class="form-group mb-3">
                                        <label for="domains" class="fw-bold">Domains</label>
                                        <textarea class="form-control" id="domains" name="domains" rows="{{ app.domains.app.length + 1 }}">{% for domain in app.domains.app %}{{ domain + "\n" }}{% endfor %}</textarea>
                                    </div>

                                    <div class="form-group mb-3">
                                        <label class="fw-bold">Domains (Global)</label>
                                        <textarea class="form-control" rows="{{ app.domains.global.length }}" disabled="" resize="none">{% for domain in app.domains.global %}{{ domain }}{{ "\n" if not loop.last }}{% endfor %}</textarea>
                                    </div>

                                    <button type="submit" class="btn btn-dark w-100">Sign in</button>

                                </form>
                            </div>
                        </div>

                        <hr>
                        App dump:
                        {{ app | dump }}
                    {% endif %}
                </div>
            </div>
        </main>
    {% endif %}
{% endblock %}